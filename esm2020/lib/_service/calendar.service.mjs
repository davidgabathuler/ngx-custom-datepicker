import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ViewMode } from '../interfaces';
import * as i0 from "@angular/core";
Date.prototype.adjustDate = function (num = 0) {
    const date = new Date(this);
    date.setDate(date.getDate() + num);
    return date;
};
/** Adjust & setDate = 1 */
Date.prototype.adjustMonth = function (num = 0) {
    this.setDate(1);
    this.setMonth(this.getMonth() + num);
    return this;
};
/** Adjust & setDate = 1 */
Date.prototype.adjustYear = function (num = 0) {
    this.setDate(1);
    this.setMonth(0);
    this.setYear(this.getFullYear() + num);
    return this;
};
Date.prototype.getDayWithStart = function (start) {
    const date = new Date(this.getTime());
    let day = date.getDay();
    day = day - start;
    if (day < 0) {
        day = 7 + day;
    }
    return day;
};
Date.prototype.getFirstDateDay = function (start) {
    const date = new Date(this.getTime());
    date.setDate(1);
    return date.getDayWithStart(start);
};
Date.prototype.getYmd = function () {
    return (this.getFullYear().toString() +
        String(this.getMonth().toString()).padStart(2, '0') +
        String(this.getDate().toString()).padStart(2, '0'));
};
export class CalendarService {
    constructor() {
        this.selectedDates = new BehaviorSubject([]);
        this.disabledDates = new BehaviorSubject(null);
        this.days = new BehaviorSubject([]);
        this.animationStep = new BehaviorSubject('stop');
        this.recountWidth = new BehaviorSubject(1);
        /** Needs for onClickDay detect change */
        this.clickDayKey = new BehaviorSubject(null);
        this.updateDate = new BehaviorSubject(new Date());
    }
    setSelectedDates(selectedDates) {
        this.selectedDates.next(selectedDates);
    }
    setDisabledDates(disabledDates) {
        this.disabledDates.next(disabledDates);
    }
    setDays(days) {
        this.days.next(days);
    }
    setShownDate(date) {
        this.shownDate = date;
    }
    addSelected(date) {
        this.selectedDates.value.push(date);
        this.selectedDates.next(this.selectedDates.value);
    }
    getCountMonths() {
        const viewMode = this.viewMode;
        if (typeof viewMode === 'number')
            return viewMode;
        if (viewMode === ViewMode.Quarter)
            return 3;
        else if (viewMode === ViewMode.Semester)
            return 6;
        return 1;
    }
    getLastDate(date) {
        const viewMode = this.viewMode;
        let lastDate = this.shownDate
            ? new Date(this.shownDate)
            : this.selectedDates.value
                ? new Date(this.selectedDates[this.selectedDates.value.length - 1])
                : new Date();
        lastDate = date ? new Date(date) : lastDate;
        //if (typeof viewMode === "ViewMode") {
        if (viewMode === ViewMode.Quarter) {
            if (lastDate.getMonth() >= 0 && lastDate.getMonth() <= 2) {
                lastDate.setMonth(2);
            }
            else if (lastDate.getMonth() >= 3 && lastDate.getMonth() <= 5) {
                lastDate.setMonth(5);
            }
            else if (lastDate.getMonth() >= 6 && lastDate.getMonth() <= 8) {
                lastDate.setMonth(8);
            }
            else if (lastDate.getMonth() >= 9 && lastDate.getMonth() <= 11) {
                lastDate.setMonth(11);
            }
        }
        else if (viewMode === ViewMode.Semester) {
            if (lastDate.getMonth() >= 0 && lastDate.getMonth() <= 5) {
                lastDate.setMonth(5);
            }
            else if (lastDate.getMonth() >= 6 && lastDate.getMonth() <= 11) {
                lastDate.setMonth(11);
            }
        }
        return lastDate;
    }
    getShownYears(lastDateShown) {
        let countMonths = 0;
        const months = [];
        countMonths = this.getCountMonths();
        this.countMonths = countMonths;
        for (let i = countMonths - 1; i >= 0; i--) {
            months.push(new Date(lastDateShown).adjustYear(-i));
        }
        this.calendar = months;
        this.viewSelectorMode = 'months';
    }
    getShownMonths(date) {
        let countMonths = 0;
        const months = [];
        const lastDate = this.getLastDate(date);
        countMonths = this.getCountMonths();
        this.countMonths = countMonths;
        for (let i = countMonths - 1; i >= 0; i--) {
            months.push(new Date(lastDate).adjustMonth(-i));
        }
        this.calendar = months;
        this.viewSelectorMode = 'days';
    }
    goPrev(firstDate) {
        const prevDate = new Date(firstDate);
        if (this.viewSelectorMode === 'days') {
            prevDate.adjustMonth(-1);
        }
        else if (this.viewSelectorMode === 'months') {
            prevDate.adjustYear(-1);
        }
        let dates = [...this.calendar];
        dates.unshift(prevDate);
        this.calendar = dates;
        this.animationStep.next('left');
        setTimeout(() => {
            dates = [...this.calendar];
            dates.splice(dates.length - 1, 1);
            this.calendar = dates;
            this.animationStep.next('stop');
        }, 205);
    }
    goNext(lastDate) {
        const nextDate = new Date(lastDate);
        if (this.viewSelectorMode === 'days') {
            nextDate.adjustMonth(1);
        }
        else if (this.viewSelectorMode === 'months') {
            nextDate.adjustYear(1);
        }
        let dates = [...this.calendar];
        dates.push(nextDate);
        this.calendar = dates;
        this.animationStep.next('right');
        setTimeout(() => {
            dates = [...this.calendar];
            dates.splice(0, 1);
            this.calendar = dates;
            this.animationStep.next('stop');
        }, 205);
    }
}
/** @nocollapse */ CalendarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: CalendarService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CalendarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: CalendarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: CalendarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jdXN0b20tZGF0ZXBpY2tlci9zcmMvbGliL19zZXJ2aWNlL2NhbGVuZGFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFXLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBc0IsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQWE3RCxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQzNDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsMkJBQTJCO0FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNyQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLDJCQUEyQjtBQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLElB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QUU7WUFDZCxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUUzQixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDOzsrSEFyS1UsZUFBZTttSUFBZixlQUFlLGNBRmQsTUFBTTsyRkFFUCxlQUFlO2tCQUgzQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF5LCBEaXNhYmxlZERhdGVzLCBWaWV3TW9kZSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBEYXRlIHtcbiAgICBhZGp1c3RNb250aChudW1iZXI6IG51bWJlcik6IERhdGU7XG4gICAgYWRqdXN0RGF0ZShudW1iZXI6IG51bWJlcik6IERhdGU7XG4gICAgYWRqdXN0WWVhcihudW1iZXI6IG51bWJlcik6IERhdGU7XG4gICAgZ2V0Rmlyc3REYXRlRGF5KHN0YXJ0OiBudW1iZXIpOiBudW1iZXI7XG4gICAgZ2V0RGF5V2l0aFN0YXJ0KHN0YXJ0OiBudW1iZXIpOiBudW1iZXI7XG4gICAgZ2V0WW1kKCk6IHN0cmluZztcbiAgfVxufVxuXG5EYXRlLnByb3RvdHlwZS5hZGp1c3REYXRlID0gZnVuY3Rpb24gKG51bSA9IDApOiBEYXRlIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRoaXMpO1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBudW0pO1xuICByZXR1cm4gZGF0ZTtcbn07XG5cbi8qKiBBZGp1c3QgJiBzZXREYXRlID0gMSAqL1xuRGF0ZS5wcm90b3R5cGUuYWRqdXN0TW9udGggPSBmdW5jdGlvbiAobnVtID0gMCk6IERhdGUge1xuICB0aGlzLnNldERhdGUoMSk7XG4gIHRoaXMuc2V0TW9udGgodGhpcy5nZXRNb250aCgpICsgbnVtKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKiogQWRqdXN0ICYgc2V0RGF0ZSA9IDEgKi9cbkRhdGUucHJvdG90eXBlLmFkanVzdFllYXIgPSBmdW5jdGlvbiAobnVtID0gMCk6IERhdGUge1xuICB0aGlzLnNldERhdGUoMSk7XG4gIHRoaXMuc2V0TW9udGgoMCk7XG4gIHRoaXMuc2V0WWVhcih0aGlzLmdldEZ1bGxZZWFyKCkgKyBudW0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkRhdGUucHJvdG90eXBlLmdldERheVdpdGhTdGFydCA9IGZ1bmN0aW9uIChzdGFydDogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuZ2V0VGltZSgpKTtcbiAgbGV0IGRheSA9IGRhdGUuZ2V0RGF5KCk7XG5cbiAgZGF5ID0gZGF5IC0gc3RhcnQ7XG5cbiAgaWYgKGRheSA8IDApIHtcbiAgICBkYXkgPSA3ICsgZGF5O1xuICB9XG4gIHJldHVybiBkYXk7XG59O1xuXG5EYXRlLnByb3RvdHlwZS5nZXRGaXJzdERhdGVEYXkgPSBmdW5jdGlvbiAoc3RhcnQ6IGFueSk6IG51bWJlciB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmdldFRpbWUoKSk7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF5V2l0aFN0YXJ0KHN0YXJ0KTtcbn07XG5cbkRhdGUucHJvdG90eXBlLmdldFltZCA9IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xuICByZXR1cm4gKFxuICAgIHRoaXMuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpICtcbiAgICBTdHJpbmcodGhpcy5nZXRNb250aCgpLnRvU3RyaW5nKCkpLnBhZFN0YXJ0KDIsICcwJykgK1xuICAgIFN0cmluZyh0aGlzLmdldERhdGUoKS50b1N0cmluZygpKS5wYWRTdGFydCgyLCAnMCcpXG4gICk7XG59O1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDYWxlbmRhclNlcnZpY2Uge1xuICBjYWxlbmRhcjogRGF0ZVtdO1xuICBzaG93bkRhdGU6IERhdGU7XG4gIHZpZXdNb2RlOiBudW1iZXIgfCBWaWV3TW9kZTtcbiAgdmlld1NlbGVjdG9yTW9kZTogc3RyaW5nO1xuICBzZWxlY3RNb2RlOiBzdHJpbmc7XG5cbiAgc2VsZWN0ZWREYXRlczogQmVoYXZpb3JTdWJqZWN0PERhdGVbXT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcbiAgZGlzYWJsZWREYXRlczogQmVoYXZpb3JTdWJqZWN0PERpc2FibGVkRGF0ZXM+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcbiAgZGF5czogQmVoYXZpb3JTdWJqZWN0PERheVtdPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pO1xuXG4gIGNvdW50TW9udGhzOiBudW1iZXI7XG4gIHdlZWtTdGFydDogbnVtYmVyO1xuICB3ZWVrZW5kczogbnVtYmVyW107XG5cbiAgYW5pbWF0aW9uU3RlcCA9IG5ldyBCZWhhdmlvclN1YmplY3QoJ3N0b3AnKTtcblxuICByZWNvdW50V2lkdGggPSBuZXcgQmVoYXZpb3JTdWJqZWN0KDEpO1xuXG4gIC8qKiBOZWVkcyBmb3Igb25DbGlja0RheSBkZXRlY3QgY2hhbmdlICovXG4gIGNsaWNrRGF5S2V5OiBCZWhhdmlvclN1YmplY3Q8e1xuICAgIGRheTogRGF5O1xuICAgIGtleTogc3RyaW5nO1xuICB9IHwgbnVsbD4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuXG4gIHVwZGF0ZURhdGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBEYXRlKCkpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBzZXRTZWxlY3RlZERhdGVzKHNlbGVjdGVkRGF0ZXM6IERhdGVbXSk6IHZvaWQge1xuICAgIHRoaXMuc2VsZWN0ZWREYXRlcy5uZXh0KHNlbGVjdGVkRGF0ZXMpO1xuICB9XG5cbiAgc2V0RGlzYWJsZWREYXRlcyhkaXNhYmxlZERhdGVzOiBEaXNhYmxlZERhdGVzKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZERhdGVzLm5leHQoZGlzYWJsZWREYXRlcyk7XG4gIH1cblxuICBzZXREYXlzKGRheXM6IERheVtdKTogdm9pZCB7XG4gICAgdGhpcy5kYXlzLm5leHQoZGF5cyk7XG4gIH1cblxuICBzZXRTaG93bkRhdGUoZGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIHRoaXMuc2hvd25EYXRlID0gZGF0ZTtcbiAgfVxuXG4gIGFkZFNlbGVjdGVkKGRhdGU6IERhdGUpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkRGF0ZXMudmFsdWUucHVzaChkYXRlKTtcbiAgICB0aGlzLnNlbGVjdGVkRGF0ZXMubmV4dCh0aGlzLnNlbGVjdGVkRGF0ZXMudmFsdWUpO1xuICB9XG5cbiAgcHVibGljIGdldENvdW50TW9udGhzKCk6IG51bWJlciB7XG4gICAgY29uc3Qgdmlld01vZGUgPSB0aGlzLnZpZXdNb2RlO1xuICAgIGlmICh0eXBlb2Ygdmlld01vZGUgPT09ICdudW1iZXInKSByZXR1cm4gdmlld01vZGU7XG5cbiAgICBpZiAodmlld01vZGUgPT09IFZpZXdNb2RlLlF1YXJ0ZXIpIHJldHVybiAzO1xuICAgIGVsc2UgaWYgKHZpZXdNb2RlID09PSBWaWV3TW9kZS5TZW1lc3RlcikgcmV0dXJuIDY7XG5cbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMYXN0RGF0ZShkYXRlPzogRGF0ZSk6IERhdGUge1xuICAgIGNvbnN0IHZpZXdNb2RlID0gdGhpcy52aWV3TW9kZTtcbiAgICBsZXQgbGFzdERhdGUgPSB0aGlzLnNob3duRGF0ZVxuICAgICAgPyBuZXcgRGF0ZSh0aGlzLnNob3duRGF0ZSlcbiAgICAgIDogdGhpcy5zZWxlY3RlZERhdGVzLnZhbHVlXG4gICAgICA/IG5ldyBEYXRlKHRoaXMuc2VsZWN0ZWREYXRlc1t0aGlzLnNlbGVjdGVkRGF0ZXMudmFsdWUubGVuZ3RoIC0gMV0pXG4gICAgICA6IG5ldyBEYXRlKCk7XG5cbiAgICBsYXN0RGF0ZSA9IGRhdGUgPyBuZXcgRGF0ZShkYXRlKSA6IGxhc3REYXRlO1xuXG4gICAgLy9pZiAodHlwZW9mIHZpZXdNb2RlID09PSBcIlZpZXdNb2RlXCIpIHtcbiAgICBpZiAodmlld01vZGUgPT09IFZpZXdNb2RlLlF1YXJ0ZXIpIHtcbiAgICAgIGlmIChsYXN0RGF0ZS5nZXRNb250aCgpID49IDAgJiYgbGFzdERhdGUuZ2V0TW9udGgoKSA8PSAyKSB7XG4gICAgICAgIGxhc3REYXRlLnNldE1vbnRoKDIpO1xuICAgICAgfSBlbHNlIGlmIChsYXN0RGF0ZS5nZXRNb250aCgpID49IDMgJiYgbGFzdERhdGUuZ2V0TW9udGgoKSA8PSA1KSB7XG4gICAgICAgIGxhc3REYXRlLnNldE1vbnRoKDUpO1xuICAgICAgfSBlbHNlIGlmIChsYXN0RGF0ZS5nZXRNb250aCgpID49IDYgJiYgbGFzdERhdGUuZ2V0TW9udGgoKSA8PSA4KSB7XG4gICAgICAgIGxhc3REYXRlLnNldE1vbnRoKDgpO1xuICAgICAgfSBlbHNlIGlmIChsYXN0RGF0ZS5nZXRNb250aCgpID49IDkgJiYgbGFzdERhdGUuZ2V0TW9udGgoKSA8PSAxMSkge1xuICAgICAgICBsYXN0RGF0ZS5zZXRNb250aCgxMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gVmlld01vZGUuU2VtZXN0ZXIpIHtcbiAgICAgIGlmIChsYXN0RGF0ZS5nZXRNb250aCgpID49IDAgJiYgbGFzdERhdGUuZ2V0TW9udGgoKSA8PSA1KSB7XG4gICAgICAgIGxhc3REYXRlLnNldE1vbnRoKDUpO1xuICAgICAgfSBlbHNlIGlmIChsYXN0RGF0ZS5nZXRNb250aCgpID49IDYgJiYgbGFzdERhdGUuZ2V0TW9udGgoKSA8PSAxMSkge1xuICAgICAgICBsYXN0RGF0ZS5zZXRNb250aCgxMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3REYXRlO1xuICB9XG5cbiAgZ2V0U2hvd25ZZWFycyhsYXN0RGF0ZVNob3duOiBEYXRlKTogdm9pZCB7XG4gICAgbGV0IGNvdW50TW9udGhzID0gMDtcbiAgICBjb25zdCBtb250aHMgPSBbXTtcblxuICAgIGNvdW50TW9udGhzID0gdGhpcy5nZXRDb3VudE1vbnRocygpO1xuICAgIHRoaXMuY291bnRNb250aHMgPSBjb3VudE1vbnRocztcblxuICAgIGZvciAobGV0IGkgPSBjb3VudE1vbnRocyAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBtb250aHMucHVzaChuZXcgRGF0ZShsYXN0RGF0ZVNob3duKS5hZGp1c3RZZWFyKC1pKSk7XG4gICAgfVxuICAgIHRoaXMuY2FsZW5kYXIgPSBtb250aHM7XG4gICAgdGhpcy52aWV3U2VsZWN0b3JNb2RlID0gJ21vbnRocyc7XG4gIH1cblxuICBnZXRTaG93bk1vbnRocyhkYXRlPzogRGF0ZSk6IHZvaWQge1xuICAgIGxldCBjb3VudE1vbnRocyA9IDA7XG4gICAgY29uc3QgbW9udGhzID0gW107XG4gICAgY29uc3QgbGFzdERhdGUgPSB0aGlzLmdldExhc3REYXRlKGRhdGUpO1xuXG4gICAgY291bnRNb250aHMgPSB0aGlzLmdldENvdW50TW9udGhzKCk7XG4gICAgdGhpcy5jb3VudE1vbnRocyA9IGNvdW50TW9udGhzO1xuXG4gICAgZm9yIChsZXQgaSA9IGNvdW50TW9udGhzIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIG1vbnRocy5wdXNoKG5ldyBEYXRlKGxhc3REYXRlKS5hZGp1c3RNb250aCgtaSkpO1xuICAgIH1cblxuICAgIHRoaXMuY2FsZW5kYXIgPSBtb250aHM7XG4gICAgdGhpcy52aWV3U2VsZWN0b3JNb2RlID0gJ2RheXMnO1xuICB9XG5cbiAgZ29QcmV2KGZpcnN0RGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIGNvbnN0IHByZXZEYXRlID0gbmV3IERhdGUoZmlyc3REYXRlKTtcblxuICAgIGlmICh0aGlzLnZpZXdTZWxlY3Rvck1vZGUgPT09ICdkYXlzJykge1xuICAgICAgcHJldkRhdGUuYWRqdXN0TW9udGgoLTEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy52aWV3U2VsZWN0b3JNb2RlID09PSAnbW9udGhzJykge1xuICAgICAgcHJldkRhdGUuYWRqdXN0WWVhcigtMSk7XG4gICAgfVxuXG4gICAgbGV0IGRhdGVzID0gWy4uLnRoaXMuY2FsZW5kYXJdO1xuICAgIGRhdGVzLnVuc2hpZnQocHJldkRhdGUpO1xuICAgIHRoaXMuY2FsZW5kYXIgPSBkYXRlcztcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXAubmV4dCgnbGVmdCcpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkYXRlcyA9IFsuLi50aGlzLmNhbGVuZGFyXTtcbiAgICAgIGRhdGVzLnNwbGljZShkYXRlcy5sZW5ndGggLSAxLCAxKTtcbiAgICAgIHRoaXMuY2FsZW5kYXIgPSBkYXRlcztcbiAgICAgIHRoaXMuYW5pbWF0aW9uU3RlcC5uZXh0KCdzdG9wJyk7XG4gICAgfSwgMjA1KTtcbiAgfVxuXG4gIGdvTmV4dChsYXN0RGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIGNvbnN0IG5leHREYXRlID0gbmV3IERhdGUobGFzdERhdGUpO1xuXG4gICAgaWYgKHRoaXMudmlld1NlbGVjdG9yTW9kZSA9PT0gJ2RheXMnKSB7XG4gICAgICBuZXh0RGF0ZS5hZGp1c3RNb250aCgxKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudmlld1NlbGVjdG9yTW9kZSA9PT0gJ21vbnRocycpIHtcbiAgICAgIG5leHREYXRlLmFkanVzdFllYXIoMSk7XG4gICAgfVxuXG4gICAgbGV0IGRhdGVzID0gWy4uLnRoaXMuY2FsZW5kYXJdO1xuICAgIGRhdGVzLnB1c2gobmV4dERhdGUpO1xuICAgIHRoaXMuY2FsZW5kYXIgPSBkYXRlcztcbiAgICB0aGlzLmFuaW1hdGlvblN0ZXAubmV4dCgncmlnaHQnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZGF0ZXMgPSBbLi4udGhpcy5jYWxlbmRhcl07XG5cbiAgICAgIGRhdGVzLnNwbGljZSgwLCAxKTtcbiAgICAgIHRoaXMuY2FsZW5kYXIgPSBkYXRlcztcbiAgICAgIHRoaXMuYW5pbWF0aW9uU3RlcC5uZXh0KCdzdG9wJyk7XG4gICAgfSwgMjA1KTtcbiAgfVxufVxuIl19