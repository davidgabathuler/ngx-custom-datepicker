import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./calendar.service";
export class DayService {
    constructor(calendarService) {
        this.calendarService = calendarService;
    }
    getIsDisabled(date) {
        const disabledDates = this.calendarService.disabledDates.value;
        if (!disabledDates) {
            return false;
        }
        if (disabledDates.dates &&
            disabledDates.dates.length > 0 &&
            disabledDates.dates.find((disableDate) => disableDate.getTime() === date.getTime())) {
            return true;
        }
        if (disabledDates.after && disabledDates.after.getTime() < date.getTime()) {
            return true;
        }
        if (disabledDates.before && disabledDates.before.getTime() > date.getTime()) {
            return true;
        }
        return false;
    }
    createDay(date) {
        this.day = {
            isDisabled: this.getIsDisabled(date),
            isWeekEnd: this.calendarService.weekends.includes(date.getDay()),
            isSelected: false,
            isHovered: false,
            isInPeriod: this.getIsInPeriod(date),
            date: date
        };
        return this.day;
    }
    getIsInPeriod(date) {
        if (this.calendarService.selectMode === 'period' &&
            this.calendarService.selectedDates.value.length == 2 &&
            date.getTime() >= this.calendarService.selectedDates.value[0].getTime() &&
            date.getTime() <= this.calendarService.selectedDates.value[1].getTime()) {
            return true;
        }
        return false;
    }
    getDay() {
        return this.day;
    }
    sortByDate(a, b) {
        if (a.getTime() > b.getTime())
            return 1;
        if (a.getTime() == b.getTime())
            return 0;
        if (a.getTime() < b.getTime())
            return -1;
    }
    toggleDate() {
        this.calendarService.clickDayKey.next({
            key: new Date().getYmd() + '' + Math.random(),
            day: this.day
        });
        if (this.calendarService.selectMode === 'single') {
            if (this.calendarService.selectedDates.value.length > 0) {
                this.calendarService.selectedDates.next([this.day.date]);
            }
        }
        else if (this.calendarService.selectMode === 'multiple') {
            if (this.day.isSelected) {
                const selectedDates = this.calendarService.selectedDates.value.filter((elem) => elem.getYmd() !== this.day.date.getYmd());
                selectedDates.sort(this.sortByDate);
                this.calendarService.selectedDates.next(selectedDates);
            }
            else {
                const selectedDates = this.calendarService.selectedDates.value;
                selectedDates.push(this.day.date);
                this.calendarService.selectedDates.next(selectedDates);
            }
        }
        else if (this.calendarService.selectMode === 'period') {
            if (this.day.isSelected) {
                const selectedDates = this.calendarService.selectedDates.value.filter((elem) => elem.getYmd() !== this.day.date.getYmd());
                this.calendarService.selectedDates.next(selectedDates);
            }
            else {
                if (this.calendarService.selectedDates.value.length == 2) {
                    this.calendarService.selectedDates.next([this.day.date]);
                }
                else if (this.calendarService.selectedDates.value.length < 2) {
                    const selectedDates = this.calendarService.selectedDates.value;
                    selectedDates.push(this.day.date);
                    selectedDates.sort(this.sortByDate);
                    this.calendarService.selectedDates.next(selectedDates);
                }
            }
        }
    }
}
/** @nocollapse */ DayService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: DayService, deps: [{ token: i1.CalendarService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ DayService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: DayService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: DayService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.CalendarService }]; } });
//# sourceMappingURL=data:application/json;base64,